# SDK pipeline that runs after Online/Release pipeline has completed successfully.

resources:
  pipelines:
  - pipeline: superoffice-docs  # identifier for the resource used in pipeline resource variables
    project: CRM # project for the source; optional for current project
    source: FileSet  # name of the pipeline that produces an artifact
    branch: main  # branch to pick the artifact, optional; defaults to all branches; Used only for manual or scheduled triggers
    tags: [ "SDK" ] # list of tags required on the pipeline to pickup default artifacts, optional; Used only for manual or scheduled triggers
    # version: main_10.0.7_2022.02.15-02  # the pipeline run number to pick the artifact, defaults to latest pipeline successful across all stages; Used only for manual or scheduled triggers
    #trigger: # true   # triggers are not enabled by default unless you add trigger section to the resource
    #  branches:
    #    include: 
    #    - main
stages:
- stage: Generate_Release_Docs
  jobs:
  - job: Generate_Api_Docs
    pool:
        name: OldBuildServers #vmImage: 'windows-latest'
    steps:
      - checkout: self
        persistCredentials: true
        clean: true
      
      - task: NuGetToolInstaller@1
        inputs:
          versionSpec:
          checkLatest: true
      
      - template: set-version.yml

      - pwsh: cmd /c dir $(System.DefaultWorkingDirectory)
        displayName: Contents of System.DefaultWorkingDirectory
     
      - pwsh: cmd /c dir $(Build.SourcesDirectory)
        displayName: Contents of Build.SourcesDirectory

      #get ready to start writing new api reference files
      - pwsh: |
          git branch -D release-$(SoNugetVersion)
          git checkout -b release-$(SoNugetVersion)
        displayName: Create new branch
      
      # download ApiDocs, Packages
      - task: DownloadPipelineArtifact@2
        displayName: Download Nuget Packages
        inputs:
          buildType: 'specific'
          project: '2da5b757-3c7c-4220-a588-9284611288d9'
          definition: '47'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'specific'
          pipelineId: '36591'
          artifactName: 'Packages'
          itemPattern: '**/*.nupkg'
          targetPath: '$(Build.ArtifactStagingDirectory)\NugetPackages' 

      # get ApiDocs from Fileset
      - task: DownloadPipelineArtifact@2
        displayName: Download ApiDocs Files
        inputs:
          buildType: 'specific'
          project: '2da5b757-3c7c-4220-a588-9284611288d9'
          definition: '47'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'specific'
          pipelineId: '36591'
          artifactName: 'ApiDocs'
          itemPattern: '**'
          targetPath: '$(Build.ArtifactStagingDirectory)\ApiDocs' #contains: ArchiveProviders, Database, MdoProviders, NetServerScripting,RestFiles, SoapFiles

      - pwsh: cmd /c dir $(Build.ArtifactStagingDirectory)
        displayName: Contents of Build.ArtifactStagingDirectory
      
      - task: PowerShell@2
        displayName: "Unpacking Nuget packages"
        inputs:
          targetType: 'filePath'
          filePath: $(Build.SourcesDirectory)\build\Unpack-Packages.ps1
          arguments: >
            -version "$(SoNugetVersion)"
            -source "$(Build.ArtifactStagingDirectory)\NugetPackages"
            -pkgDest "$(System.DefaultWorkingDirectory)\Packages"
      
      - task: PowerShell@2
        displayName: "Call DocFx generate yml files"
        inputs:
          targetType: 'filePath'
          filePath: $(Build.SourcesDirectory)\build\Write-DocfxMetadata.ps1
          arguments: >
            -version "$(SoNugetVersion)"
            -sourceDir "$(Build.SourcesDirectory)"

        # generate API reference yml files from nuget packages
      - task: chrismason.vsts-docfxtasks.docfx-extension-build-task.DocFxTask@0
        displayName: 'Create DocFx Documentation'
        inputs:
          solution: '$(Build.SourcesDirectory)\docfx-metadata.json'
          docfxOptions: metadata --logLevel Verbose
    
      # copy archive provider files
      - task: CopyFiles@2
        displayName: Copy Archive Providers
        inputs:
          CleanTargetFolder: true
          SourceFolder: $(Build.ArtifactStagingDirectory)\ApiDocs\ArchiveProviders
          TargetFolder: $(Build.SourcesDirectory)\docs\archive-providers\reference
          Contents: |
           *.md

      - task: CopyFiles@2
        displayName: Copy MDO Providers
        inputs:
          CleanTargetFolder: true
          SourceFolder: $(Build.ArtifactStagingDirectory)\ApiDocs\MdoProviders
          TargetFolder: $(Build.SourcesDirectory)\docs\mdo-providers\reference
          Contents: |
           *.md

      - task: CopyFiles@2
        displayName: Copy Database tables and whats-new
        inputs:
          CleanTargetFolder: true
          SourceFolder: $(Build.ArtifactStagingDirectory)\ApiDocs\Database
          TargetFolder: $(Build.SourcesDirectory)\docs\Database
          Contents: |
           **

      - task: CopyFiles@2
        displayName: Copy NetServer service scripting events
        inputs:
          CleanTargetFolder: true
          SourceFolder: $(Build.ArtifactStagingDirectory)\ApiDocs\NetServerScripting
          TargetFolder: $(Build.SourcesDirectory)\docs\automation\netserver-scripting\reference
          Contents: |
           **

      - task: CopyFiles@2
        displayName: Copy RESTful API
        inputs:
          CleanTargetFolder: true
          SourceFolder: $(Build.ArtifactStagingDirectory)\ApiDocs\RestFiles
          TargetFolder: $(Build.SourcesDirectory)\docs\api\reference\restful
          Contents: |
           **
 
      - task: CopyFiles@2
        displayName: Copy SOAP API
        inputs:
          CleanTargetFolder: true
          SourceFolder: $(Build.ArtifactStagingDirectory)\ApiDocs\SoapFiles
          TargetFolder: $(Build.SourcesDirectory)\docs\api\reference\soap
          Contents: |
           **

      - pwsh: |
          cd $(Build.SourcesDirectory)
          git add $(Build.SourcesDirectory)\docs\*
          git commit -m "Updated to release-$(SoNugetVersion)"
        displayName: 'Commit new additions'

      - task: PublishPipelineArtifact@1
        displayName: Publish SuperOffice-Docs
        inputs:
          targetPath: $(Build.SourcesDirectory)
          artifact: SuperOffice-Docs
          publishLocation: 'pipeline'

      - pwsh: |
          cd $(Build.SourcesDirectory)
          git config --global user.email "tony@superoffice.com"
          git push -u origin release-$(SoNugetVersion)
        displayName: 'Push branch'